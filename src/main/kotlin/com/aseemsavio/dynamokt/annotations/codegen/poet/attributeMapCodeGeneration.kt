package com.aseemsavio.dynamokt.annotations.codegen.poet

import com.aseemsavio.dynamokt.annotations.codegen.KotlinDataClassInfo
import com.google.devtools.ksp.processing.CodeGenerator
import com.google.devtools.ksp.processing.KSPLogger
import com.google.devtools.ksp.symbol.KSClassDeclaration
import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.FunSpec
import com.squareup.kotlinpoet.ParameterizedTypeName.Companion.parameterizedBy
import com.squareup.kotlinpoet.asClassName
import com.squareup.kotlinpoet.asTypeName
import com.squareup.kotlinpoet.ksp.writeTo
import software.amazon.awssdk.services.dynamodb.model.AttributeValue

internal fun generateAttributeMapCode(
    dataClassInfo: KotlinDataClassInfo,
    classDeclaration: KSClassDeclaration,
    codeGenerator: CodeGenerator,
    logger: KSPLogger
) {

    val mapType =
        Map::class.asClassName().parameterizedBy(String::class.asTypeName(), AttributeValue::class.asTypeName())


    FileSpec.builder(
        packageName = dataClassInfo.packageName,
        fileName = "${dataClassInfo.simpleName}Ext"
    )
        .addImport(packageName = "com.aseemsavio.dynamokt.extensions", "attributeValue")
        .addImport(packageName = "software.amazon.awssdk.services.dynamodb.model", "AttributeValue")
        .addFileComment(
            """
            This is a file generated by dynamokt. Please do not edit this file.
            Found a bug? Feel free to create an issue & contribute to the project: https://github.com/aseemsavio/dynamokt
        """.trimIndent()
        )
        .addFunction(
            FunSpec.builder(
                name = "toAttributeMap"
            ).receiver(ClassName(packageName = dataClassInfo.packageName, dataClassInfo.simpleName))
                .returns(mapType)
                .addKdoc(
                    """
                    This generated function returns a [Map] of [String] and [AttributeValue].
                    The resulting map can directly interact with the Amazon's official SDKs.
                """.trimIndent()
                )
                .addStatement("val attributeMap = mutableMapOf<String, AttributeValue>()")
                .addPropertiesToMap(dataClassInfo)
                .addStatement("return attributeMap")
                .build()
        ).build().writeTo(codeGenerator, aggregating = false).also {
            logger.info("Generated code for ${classDeclaration.simpleName.asString()}")
        }
}

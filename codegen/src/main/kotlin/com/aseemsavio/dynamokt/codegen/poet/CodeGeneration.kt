package com.aseemsavio.dynamokt.codegen.poet

import com.aseemsavio.dynamokt.codegen.preparation.KotlinDataClassInfo
import com.google.devtools.ksp.processing.CodeGenerator
import com.google.devtools.ksp.processing.KSPLogger
import com.google.devtools.ksp.symbol.KSClassDeclaration
import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.FunSpec
import com.squareup.kotlinpoet.MemberName
import com.squareup.kotlinpoet.ksp.writeTo

internal fun generateAwsSdkCode(
    packageName: String,
    dataClassInfo: KotlinDataClassInfo,
    classDeclaration: KSClassDeclaration,
    codeGenerator: CodeGenerator,
    logger: KSPLogger
) {
    val mapType = ClassName(packageName = packageName, "AttributeMap")

    FileSpec.builder(
        packageName = dataClassInfo.packageName,
        fileName = "${dataClassInfo.simpleName}Ext"
    ).addFileComment(
        """
            This is a file generated by dynamokt. Please do not edit this file.
            Found a bug? Feel free to create an issue & contribute to the project: https://github.com/aseemsavio/dynamokt
        """.trimIndent()
    ).addFunction(
        FunSpec.builder(
            name = "toAttributeMap"
        ).receiver(ClassName(packageName = dataClassInfo.packageName, dataClassInfo.simpleName))
            .returns(mapType)
            .addKdoc(
                """
                    This generated function returns a [Map] of [String] and [AttributeValue].
                    The resulting map can directly interact with the Amazon's official SDKs.
                """.trimIndent()
            ).addStatement(
                "val attributeMap = mutableMapOf<String, %M>()",
                MemberName(packageName = packageName, simpleName = "DynamoAttributeValue")
            )
            .addPropertiesToMap(dataClassInfo = dataClassInfo, packageName = packageName)
            .addStatement("return attributeMap")
            .build()
    ).addFunction(
        FunSpec.builder(
            name = "to${dataClassInfo.simpleName}"
        ).receiver(ClassName(packageName = packageName, "AttributeMap"))
            .returns(ClassName(packageName = dataClassInfo.packageName, dataClassInfo.simpleName))
            .addKdoc(
                """
                    This generated function converts a [AttributeMap] into a [${dataClassInfo.simpleName}] object.
                """.trimIndent()
            )
            .generateDataClassConstructionCode(dataClassInfo = dataClassInfo, packageName = packageName)
            .build()
    ).build().writeTo(codeGenerator, aggregating = false).also {
        logger.info("Generated code for ${classDeclaration.simpleName.asString()}")
    }
}
